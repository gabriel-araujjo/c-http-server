version: "3.8"

services:
  # api01: &api 
  #   build: .
  #   hostname: api01
  #   ports:
  #     - "8090:8090"
  #   depends_on:
  #     - db
  #   #     condition: service_healthy
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.6"
  #         memory: "200MB"
  # api02:
  #   # Essa sintaxe reusa o que foi declarado em 'api01'.
  #   <<: *api
  #   hostname: api02
  #   environment:
  #     - DB_HOSTNAME=db
  #   ports:
  #     - "8082:8080"
  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - api01
  #     - api02
  #   ports:
  #       # Obrigatório expor/usar a porta 9999 no load balancer!
  #     - "9999:9999" 
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.17"
  #         memory: "10MB"
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
    volumes:
      - type: bind
        source: ./init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.13"
          memory: "140MB"
    # healthcheck:
    #   test: [ "CMD", "pg_isready" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  db-data: {}